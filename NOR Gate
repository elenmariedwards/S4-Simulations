#Â import libraries

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# Define the constants

# production rates (k_prod_tf)
k_LuxR = 121.7 # v strong expression (nM/min)
k_XylS = 121.7 # v strong expression (nM/min)
k_TetR_LuxR = 116  # strong expression (nM/min) # 0.6 of value found with B0034
k_TetR_XylS = 116  # strong expression (nM/min) # 0.6 of value found with B0034
k_YFP = 230 #max prod rate

kcon_TetR_LuxR = 1.16  # described 'weak' - 1%
kcon_TetR_XylS = 2.25 # 44 induction ratio
kcon_YFP = 1.15 ## described 'v weak' - 0.5%


# degrad rates 
degrad_LuxR = 0.002 #  Dynamics of the quorum sensing  paper
degrad_XylS = 0.002 # assumptions to be similar to XylS
degrad_TetR = 0.14 # LVA tagged
degrad_YFP = 0.0692 # not

# other values
n = 2  
TetR_Kd = 8.75 



# Define the system of ODEs
def model(y, t, Bz, AHL):
    TetR, YFP = y
    
     
    dTetR_dt = (
        kcon_TetR_LuxR 
        + (k_TetR_LuxR * ((AHL / LuxR_Kd) / (1 + (AHL / LuxR_Kd)))) 
        + kcon_TetR_XylS 
        + (k_TetR_XylS * ((Bz / XylS_Kd) / (1 + (Bz / XylS_Kd)))) 
        - (degrad_TetR * TetR)
    )
    
   
    dYFP_dt = (
        kcon_YFP 
        + (k_YFP / (1 + (TetR / TetR_Kd)**n)) 
        - (degrad_YFP * YFP)
    )
    return [dTetR_dt, dYFP_dt]



import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint


# Initial conditions
TetR0 = 0
YFP0 = 0
initial_conditions = [TetR0, YFP0]

# Simulation parameters
t1 = np.linspace(0, 100, 500)  # Steady-state phase (no AHL/Bz)
t2 = np.linspace(100, 200, 500)  # AHL pulse phase
t = np.concatenate((t1, t2))  # Combine the time points

# AHL pulse concentrations
pulse_conditions = [(0,0), (0,10), (10,0), (10,10)]

# Colors for YFP during pulse phase
colors = ['green', 'blue', 'red', 'purple']

# Plotting YFP
plt.figure(figsize=(7, 6))


# Phase 1
solution1 = odeint(model, initial_conditions, t1, args=(0, 0))
TetR1, YFP1 = solution1.T


# Phase 2: Introduce AHL pulses
for i, (AHL,Bz) in enumerate(pulse_conditions):
    solution2 = odeint(model, [TetR1[-1], YFP1[-1]], t2, args=(AHL, Bz))
    TetR2, YFP2 = solution2.T

    # Combine YFP results
    YFP = np.concatenate((YFP1, YFP2))
    plt.plot(t, YFP, color=colors[i], label=f'AHL = {AHL} nM, Bz = {Bz} nM')

# Formatting the YFP plot
plt.title('YFP Response to AHL Pulses', fontsize=16)
plt.xlabel('Time (minutes)', fontsize=14)
plt.ylabel('YFP Concentration (nM)', fontsize=14)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.xlim(0, 200)
plt.show()

# Plotting TetR
plt.figure(figsize=(7, 6))  # Adjusted figure size for narrower plot


# Plot TetR after AHL pulses
for i, AHL in enumerate(AHL_values):
    TetR = np.concatenate((TetR1, odeint(model, [TetR1[-1], YFP1[-1]], t2, args=(AHL, Bz))[:, 0]))
    plt.plot(t, TetR, color=colors[i], label=f'AHL = {AHL} nM')

# Formatting the TetR plot
plt.title('TetR Response to AHL Pulses', fontsize=16)
plt.xlabel('Time (minutes)', fontsize=14)
plt.ylabel('TetR Concentration (nM)', fontsize=14)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.xlim(0, 200)
plt.show()


# dose response curve

TetR0 = 0
YFP0 = 0
initial_conditions = [TetR0, YFP0]

# Simulation parameters
t = np.linspace(0, 500, 1000)  # Long enough to reach steady state

# Range of AHL concentrations (logarithmic scale)
AHL_concentrations = np.logspace(-4, 2, 50)  # From 0.001 nM to 100 nM
Bz = 0  # Fixed Bz concentration

# Store steady-state YFP values
YFP_steady_state = []

# Simulate the system for each AHL concentration
for AHL in AHL_concentrations:
    solution = odeint(model, initial_conditions, t, args=(Bz, AHL))
    TetR, YFP = solution.T
    YFP_steady_state.append(YFP[-1])  # Take the final YFP value as steady state

# Plot the dose-response curve
plt.figure(figsize=(8, 6))
plt.semilogx(AHL_concentrations, YFP_steady_state, marker='o', color='blue', label='YFP', markersize=5)
plt.title('Dose-Response Curve of YFP vs AHL Concentration', fontsize=16)
plt.xlabel('AHL Concentration (nM)', fontsize=14)
plt.ylabel('Steady-State YFP (nM)', fontsize=14)

plt.xlim(1e-4, 1e2)  # Limits for the x-axis (AHL concentration)

plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()
